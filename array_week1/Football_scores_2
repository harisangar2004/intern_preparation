#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

/*
 * Complete the 'score' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts following parameters:
 *  1. INTEGER_ARRAY team1
 *  2. INTEGER_ARRAY team2
 */

vector<int> score(vector<int> team1, vector<int> team2) {
    
    sort(team1.begin(),team1.end());
    int count=0;
    int n1=team1.size() , n2=team2.size() ;
    vector<int> ans(n2);
    for(int i=0;i<n2;i++){
        for(int j=0;j<n1;j++){
            if(team1[j]<=team2[i]){
                ans[i]++;
            }
        }
    }
    return ans;

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string n_temp;
    getline(cin, n_temp);

    int n = stoi(ltrim(rtrim(n_temp)));

    string team1_temp_temp;
    getline(cin, team1_temp_temp);

    vector<string> team1_temp = split(rtrim(team1_temp_temp));

    vector<int> team1(n);

    for (int i = 0; i < n; i++) {
        int team1_item = stoi(team1_temp[i]);

        team1[i] = team1_item;
    }

    string m_temp;
    getline(cin, m_temp);

    int m = stoi(ltrim(rtrim(m_temp)));

    string team2_temp_temp;
    getline(cin, team2_temp_temp);

    vector<string> team2_temp = split(rtrim(team2_temp_temp));

    vector<int> team2(m);

    for (int i = 0; i < m; i++) {
        int team2_item = stoi(team2_temp[i]);

        team2[i] = team2_item;
    }

    vector<int> ans = score(team1, team2);

    for (size_t i = 0; i < ans.size(); i++) {
        fout << ans[i];

        if (i != ans.size() - 1) {
            fout << " ";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
