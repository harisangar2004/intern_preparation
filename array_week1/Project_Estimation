#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

/*
 * Complete the 'calculate' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER_ARRAY cost
 *  2. INTEGER target
 */

int calculate(vector<int> cost, int target) {
    int ans=0;
    set<int>s;
    for(int x:cost) s.insert(x);
    cost.clear();
    for(int x:s) cost.push_back(x);
    int n=s.size();
    for(int i=0;i<n-1;i++){
        for(int j=i+1;j<n;j++){
            if(abs(cost[i]-cost[j]) == target){
                ans++;
            }
        }
    }
    return ans;

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string n_temp;
    getline(cin, n_temp);

    int n = stoi(ltrim(rtrim(n_temp)));

    string cost_temp_temp;
    getline(cin, cost_temp_temp);

    vector<string> cost_temp = split(rtrim(cost_temp_temp));

    vector<int> cost(n);

    for (int i = 0; i < n; i++) {
        int cost_item = stoi(cost_temp[i]);

        cost[i] = cost_item;
    }

    string target_temp;
    getline(cin, target_temp);

    int target = stoi(ltrim(rtrim(target_temp)));

    int ans = calculate(cost, target);

    fout << ans << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
